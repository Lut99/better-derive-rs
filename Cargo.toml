[package]
name = "better-derive"
version = "1.4.0"
edition = "2021"
repository = "https://github.com/Lut99/better-derive-rs"
description = """
A small Rust crate that provides alternatives for Rust's builtin `Clone`-, `Copy`-, `Debug`-,
`Eq`-, `Hash`- and `PartialEq`-derive macros that apply more accurate trait bounds for generated
impls.


# Installation
To use the crate, simply add it to your `Cargo.toml`:
```toml
better-derive = { git = "https://github.com/Lut99/better-derive-rs" }
```

You can also use a specific version by adding the appropriate tag:
```toml
better-derive = { git = "https://github.com/Lut99/better-derive-rs", tag = "v1.3.0" }
```


# Usage
This crate is supposed to be a drop-in replacement of the builtin macro counterparts.

The only difference are the generic bounds generated by the macro: instead of generating an e.g.
`Debug`-bound on all _generics_, it generates it for all _fields types_.

For example:
```rust
use std::fmt::{Debug, Formatter, Result as FResult};
use std::marker::PhantomData;

struct Foo<T>(PhantomData<T>);

// Generated by the builtin
impl<T> Debug for Foo<T>
where
    T: Debug,
{
    fn fmt(&self, f: &mut Formatter) -> FResult { /* ... */ }
}

// Generated by our macro
impl<T> Debug for Foo<T>
where
    PhantomData<T>: Debug,
{
    fn fmt(&self, f: &mut Formatter) -> FResult { /* ... */ }
}
```
Since `PhantomData` implements `Debug` regardless of whether `T` does, this means that this
property holds for `Foo` as well.

## Supported macros
The following macros find a counterpart in this crate:
- `Clone`
- `Copy`
- `Debug`
- `Eq`
- `Hash`
- `Ord`
- `PartialEq`
- `PartialOrd`

## All macros: Defining bounds
By default, the generated impls generate bounds of the shape for e.g. `Clone` as follows:
```plain
TYPE: Clone,
```
for every type `TYPE` that somehow refers to one of the generic bounds of the derived object. If
this doesn't suit your needs, you can define your own list of types using the
`#[better_derive(bound = (...))]`-macro:
```rust
use std::marker::PhantomData;
use better_derive::Clone;

// This emulates the standard behaviour
#[derive(Clone)]
#[clone(bound = (T))]
// Equivalent to the attribute above, but for all the crate macros
#[better_derive(bound = (T))]
struct Foo<T> {
    foo: PhantomData<T>,
}
```

## `Debug`, `Hash`, `PartialEq` and `PartialOrd`: Skipping fields
The `Debug`-, `Hash`-, `PartialEq`- and `PartialOrd` derive macros have some additional
functionality: you can optionally ignore fields in the generated implementation.
Specifically, you can annotate fields with `#[debug(skip)]`, `#[hash(skip)]` and/or
`#[partial_eq(skip)]`, respectively, to have it omitted.

See the respective macro's docs for more information, or see the [`skip.rs`](./examples/skip.rs)-
example in the repository.

## Documentation
The auto-generated code documentation can be generated by running:
```sh
cargo doc --no-deps --open
```
This will automatically open the resulting web pages with your default browser.

## Examples
For more examples, see the `examples/`-folder in the main repository.


# Contributing
Contributions are welcome! Feel free to
[raise an issue](https://github.com/Lut99/better-derive-rs/issues) or
[create a pull request](https://github.com/Lut99/better-derive-rs/pulls).


# License
This project is licensed under the Apache 2.0 license. See `LICENSE/` in the repository for more
details.
"""


[lib]
proc-macro = true


[dependencies]
proc-macro2 = "1.0.93"
quote = { version = "1.0.38", default-features = false }
syn = { version = "2.0.98", default-features = false, features = ["clone-impls", "derive", "extra-traits", "parsing", "printing", "proc-macro", "visit"] }


[features]
default = []
